package org.example;

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.*;

public class DuplicateDetector {

    static class ModelNode {
        String type;
        String label;
        int index;

        public ModelNode(String type, String label, int index) {
            this.type = type;
            this.label = label;
            this.index = index;
        }

        @Override
        public String toString() {
            return type + ":" + label;
        }

    }

    static class ModelEdge {
        String type;
        int sourceIndex;
        int targetIndex;
        String sourceLabel;
        String targetLabel;
        String additionalInfo;

        public ModelEdge(String type, int sourceIndex, int targetIndex, String additionalInfo, String sourceLabel, String targetLabel) {
            this.type = type;
            this.sourceIndex = sourceIndex;
            this.targetIndex = targetIndex;
            this.additionalInfo = additionalInfo;
            this.sourceLabel = sourceLabel;
            this.targetLabel = targetLabel;
        }

        @Override
        public String toString() {
            // NEU: Ungerichtete Kanten behandeln
            if (isUndirected(type)) {
                List<String> labels = Arrays.asList(sourceLabel, targetLabel);
                Collections.sort(labels);
                return type + ":" + labels.get(0) + "--" + labels.get(1)
                        + (additionalInfo != null ? " [" + additionalInfo + "]" : "");
            } else {
                return type + ":" + sourceLabel + "->" + targetLabel
                        + (additionalInfo != null ? " [" + additionalInfo + "]" : "");
            }
        }

        // NEU: Definiert, welche Typen ungerichtet behandelt werden
        private static boolean isUndirected(String type) {
            return Set.of("association", "uml:Association", "hasAttribute").contains(type);
        }
    }


    static class UMLModel {
        List<ModelNode> nodes = new ArrayList<>();
        List<ModelEdge> edges = new ArrayList<>();
        Map<String, Integer> idToIndex = new HashMap<>();
        String source;

        public UMLModel(String source) {
            this.source = source;
        }

        public void addNode(String id, String type, String label) {
            int index = nodes.size();
            ModelNode node = new ModelNode(type, label, index);
            nodes.add(node);
            if (id != null && !id.isEmpty()) {
                idToIndex.put(id, index);
            }
        }

        public void addEdge(String type, String sourceId, String targetId, String additionalInfo) {
            Integer sourceIndex = idToIndex.get(sourceId);
            Integer targetIndex = idToIndex.get(targetId);

            if (sourceIndex == null || targetIndex == null) return;
            if (sourceIndex < 0 || sourceIndex >= nodes.size()) return;
            if (targetIndex < 0 || targetIndex >= nodes.size()) return;

            String sourceLabel = nodes.get(sourceIndex).label;
            String targetLabel = nodes.get(targetIndex).label;

            edges.add(new ModelEdge(type, sourceIndex, targetIndex, additionalInfo, sourceLabel, targetLabel));
        }

    }

    public static UMLModel parseXMI(String filePath) throws Exception {
        File file = new File(filePath);
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document doc = builder.parse(file);
        doc.getDocumentElement().normalize();

        UMLModel model = new UMLModel(filePath);
        extractNodes(doc.getDocumentElement(), model);  // zuerst nur Knoten
        extractEdges(doc.getDocumentElement(), model);  // dann Kanten
        return model;
    }

    private static String getMultiplicity(Element end) {
        String lower = "1";  // Default
        String upper = "1";

        NodeList children = end.getChildNodes();
        for (int i = 0; i < children.getLength(); i++) {
            if (children.item(i) instanceof Element) {
                Element e = (Element) children.item(i);
                if (e.getTagName().endsWith("lowerValue")) {
                    String val = e.getAttribute("value");
                    if (!val.isEmpty()) lower = val;
                } else if (e.getTagName().endsWith("upperValue")) {
                    String val = e.getAttribute("value");
                    if (!val.isEmpty()) upper = val;
                }
            }
        }

        return lower.equals(upper) ? lower : lower + ".." + upper;
    }



    private static void extractNodes(Node node, UMLModel model) {
        if (node.getNodeType() != Node.ELEMENT_NODE) return;

        Element element = (Element) node;
        String id = element.getAttribute("xmi:id");
        String type = element.getAttribute("xsi:type");
        if (type == null || type.isEmpty()) type = element.getAttribute("xmi:type");
        if ((type == null || type.isEmpty()) && element.getTagName() != null) type = element.getTagName();
        String name = element.getAttribute("name");

        Set<String> blacklist = Set.of(
                "uml:LiteralString",
                "uml:LiteralInteger",
                "uml:LiteralUnlimitedNatural",
                "uml:Expression",
                "uml:Comment",
                "uml:Extension"
        );

        Set<String> nonNodeTypes = Set.of(
                "uml:ControlFlow", "uml:ObjectFlow", "uml:Transition",
                "uml:Dependency", "uml:Abstraction", "uml:Usage",
                "uml:Include", "uml:Extend", "uml:Association", "uml:Generalization"
        );

        boolean isRealNode = type != null &&
                type.startsWith("uml:") &&
                !blacklist.contains(type) &&
                !nonNodeTypes.contains(type);

        if (id != null && !id.isEmpty()) {
            if (isRealNode) {
                model.addNode(id, type, name != null ? name : "");
            } else {
                // Nicht als Knoten zählen, aber für Kantenauflösung registrieren
                model.idToIndex.putIfAbsent(id, model.nodes.size());
            }
        }

        // Speziell: ownedAttribute auch als Knoten + Kante zur Elternklasse
        if (element.getTagName().equals("ownedAttribute")) {
            String attrId = element.getAttribute("xmi:id");
            String attrName = element.getAttribute("name");

            Node parent = element.getParentNode();
            if (parent != null && parent instanceof Element) {
                String parentId = ((Element) parent).getAttribute("xmi:id");
                if (attrId != null && !attrId.isEmpty() && parentId != null && !parentId.isEmpty()) {
                    model.addNode(attrId, "uml:Attribute", attrName != null ? attrName : "");
                    model.addEdge("hasAttribute", parentId, attrId, null);
                }
            }
        }


        NodeList children = element.getChildNodes();
        for (int i = 0; i < children.getLength(); i++) {
            extractNodes(children.item(i), model);
        }
    }


    private static void extractEdges(Node node, UMLModel model) {
        if (node.getNodeType() != Node.ELEMENT_NODE) return;

        Element element = (Element) node;
        String id = element.getAttribute("xmi:id");
        String type = element.getAttribute("xsi:type");
        if (type == null || type.isEmpty()) type = element.getAttribute("xmi:type");
        if ((type == null || type.isEmpty()) && element.getTagName() != null) type = element.getTagName();

        // Nur wenn eine source-ID existiert
        if (id != null && !id.isEmpty()) {
            // Standard-Kantenattribute
            for (String attr : List.of("source", "target", "client", "supplier", "memberEnd",
                    "incoming", "outgoing", "relatedElement", "end",
                    "message", "covered", "owner", "context", "redefinedElement")) {
                if (element.hasAttribute(attr)) {
                    for (String targetId : element.getAttribute(attr).split(" ")) {
                        if (!targetId.isEmpty()) {
                            model.addEdge(attr, id, targetId, null);
                        }
                    }
                }
            }
        }

        if (element.hasAttribute("sourceRef") && element.hasAttribute("targetRef")) {
            model.addEdge(element.getTagName(), element.getAttribute("sourceRef"), element.getAttribute("targetRef"), null);
        }

        if ("uml:Message".equals(type)) {
            if (element.hasAttribute("sendEvent"))
                model.addEdge("sendEvent", id, element.getAttribute("sendEvent"), null);
            if (element.hasAttribute("receiveEvent"))
                model.addEdge("receiveEvent", id, element.getAttribute("receiveEvent"), null);
        }

        if ("uml:ExecutionSpecification".equals(type)) {
            if (element.hasAttribute("start"))
                model.addEdge("start", id, element.getAttribute("start"), null);
            if (element.hasAttribute("finish"))
                model.addEdge("finish", id, element.getAttribute("finish"), null);
        }

        if ("uml:GeneralOrdering".equals(type)) {
            String before = element.getAttribute("before");
            String after = element.getAttribute("after");
            if (!before.isEmpty() && !after.isEmpty()) {
                model.addEdge("generalOrdering", before, after, null);
            }
        }

        if ("uml:Lifeline".equals(type)) {
            String represents = element.getAttribute("represents");
            if (!represents.isEmpty()) {
                model.addEdge("represents", id, represents, null);
            }
        }

        if ("uml:InteractionUse".equals(type)) {
            String refersTo = element.getAttribute("refersTo");
            if (!refersTo.isEmpty()) {
                model.addEdge("interactionUse", id, refersTo, null);
            }
        }

        if ("uml:OccurrenceSpecification".equals(type)) {
            if (element.hasAttribute("before")) {
                for (String t : element.getAttribute("before").split(" ")) {
                    model.addEdge("before", id, t, null);
                }
            }
            if (element.hasAttribute("after")) {
                for (String t : element.getAttribute("after").split(" ")) {
                    model.addEdge("after", t, id, null);
                }
            }
        }

        if ("uml:SendSignalAction".equals(type)) {
            String signal = element.getAttribute("signal");
            String target = element.getAttribute("target");
            if (!signal.isEmpty()) model.addEdge("signal", id, signal, null);
            if (!target.isEmpty()) model.addEdge("target", id, target, null);
        }

        // TemplateBinding
        if ("uml:TemplateBinding".equals(type)) {
            String boundElement = element.getAttribute("boundElement");
            if (!boundElement.isEmpty()) {
                model.addEdge("boundElement", id, boundElement, null);
            }
            NodeList substitutions = element.getElementsByTagName("parameterSubstitution");
            for (int i = 0; i < substitutions.getLength(); i++) {
                Element sub = (Element) substitutions.item(i);
                String actual = sub.getAttribute("actual");
                if (!actual.isEmpty()) {
                    model.addEdge("parameterSubstitution", id, actual, null);
                }
            }
        }

        if ("uml:Substitution".equals(type)) {
            String contract = element.getAttribute("contract");
            String classifier = element.getAttribute("substitutingClassifier");
            if (!contract.isEmpty()) model.addEdge("contract", id, contract, null);
            if (!classifier.isEmpty()) model.addEdge("substitutingClassifier", id, classifier, null);
        }

        if ("uml:InformationFlow".equals(type)) {
            for (String src : element.getAttribute("informationSource").split(" ")) {
                if (!src.isEmpty()) model.addEdge("informationSource", id, src, null);
            }
            for (String tgt : element.getAttribute("informationTarget").split(" ")) {
                if (!tgt.isEmpty()) model.addEdge("informationTarget", id, tgt, null);
            }
            String realization = element.getAttribute("realization");
            if (!realization.isEmpty()) {
                model.addEdge("realization", id, realization, null);
            }
        }

        if ("uml:RedefinableTemplateSignature".equals(type)) {
            for (String param : element.getAttribute("ownedParameter").split(" ")) {
                if (!param.isEmpty()) model.addEdge("ownedParameter", id, param, null);
            }
        }

        if ("uml:ClassifierTemplateParameter".equals(type)) {
            String parametered = element.getAttribute("parameteredElement");
            if (!parametered.isEmpty()) model.addEdge("parameteredElement", id, parametered, null);
            String constraining = element.getAttribute("constrainingClassifier");
            if (!constraining.isEmpty()) model.addEdge("constrainingClassifier", id, constraining, null);
        }

        if (Set.of("uml:Node", "uml:Device", "uml:ExecutionEnvironment").contains(type)) {
            for (String dep : element.getAttribute("deployment").split(" ")) {
                if (!dep.isEmpty()) model.addEdge("deployment", id, dep, null);
            }
            for (String art : element.getAttribute("deployedArtifact").split(" ")) {
                if (!art.isEmpty()) model.addEdge("deployedArtifact", id, art, null);
            }
        }

        if ("uml:Artifact".equals(type)) {
            for (String man : element.getAttribute("manifestation").split(" ")) {
                if (!man.isEmpty()) model.addEdge("manifestation", id, man, null);
            }
        }

        // Association via ownedEnd
        if (element.getTagName().equals("packagedElement") && type.contains("Association")) {
            String source = null, target = null;
            String aggregation = "", multiplicity = "", roleNames = "";

            NodeList children = element.getChildNodes();
            for (int i = 0; i < children.getLength(); i++) {
                Node child = children.item(i);
                if (child.getNodeType() == Node.ELEMENT_NODE && ((Element) child).getTagName().equals("ownedEnd")) {
                    Element ownedEnd = (Element) child;
                    String endType = ownedEnd.getAttribute("type");
                    String agg = ownedEnd.getAttribute("aggregation");
                    String mult = getMultiplicity(ownedEnd);
                    String role = ownedEnd.getAttribute("name");

                    // Sicherstellen, dass Platzhalter verwendet werden, wenn leer
                    if (agg.isEmpty()) agg = "none";
                    if (mult.isEmpty()) mult = "1";
                    if (role.isEmpty()) role = "-";

                    aggregation += agg + "/";
                    multiplicity += mult + "/";
                    roleNames += role + "/";

                    if (source == null) source = endType;
                    else if (target == null) target = endType;
                }
            }

            if (source != null && target != null) {
                if (aggregation.endsWith("/")) aggregation = aggregation.substring(0, aggregation.length() - 1);
                if (multiplicity.endsWith("/")) multiplicity = multiplicity.substring(0, multiplicity.length() - 1);
                if (roleNames.endsWith("/")) roleNames = roleNames.substring(0, roleNames.length() - 1);

                String info = aggregation + ", " + multiplicity + "; role:" + roleNames;
                model.addEdge("association", source, target, info);
            }
        }



        NodeList children = element.getChildNodes();
        for (int i = 0; i < children.getLength(); i++) {
            extractEdges(children.item(i), model);
        }
    }



    public static String generateNormalForm(UMLModel model) {
        List<String> normalizedNodes = model.nodes.stream()
                .map(ModelNode::toString)
                .sorted()
                .collect(Collectors.toList());

        List<String> normalizedEdges = model.edges.stream()
                .map(ModelEdge::toString)
                .sorted()
                .collect(Collectors.toList());

        return String.join("|", normalizedNodes) + "||" + String.join("|", normalizedEdges);
    }

    public static String computeHash(String normalForm) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(normalForm.getBytes());
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("SHA-256 not available", e);
        }
    }

    public static void main(String[] args) {
        try {
            File folder = new File("C:/Users/raiha/Desktop/3 Semester/WissArbeit/repo-genmymodel-uml/data");
            //File folder = new File("C:/Users/raiha/Desktop/3 Semester/WissArbeit/testsxml");
            File[] files = folder.listFiles((dir, name) -> name.endsWith(".xmi"));

            if (files == null || files.length == 0) {
                System.out.println("No XMI files found.");
                return;
            }

            Map<String, List<String>> duplicateGroups = new HashMap<>();

            for (File file : files) {
                UMLModel model = parseXMI(file.getAbsolutePath());

                //System.out.println("File: " + file.getName() + ", Knoten: " + model.nodes.size() + ", Kanten: " + model.edges.size());
                //System.out.println("  Knoten sind: " + model.nodes.stream().map(Object::toString).collect(Collectors.joining(", ")));
                //System.out.println("  Kanten sind: " + model.edges.stream().map(Object::toString).collect(Collectors.joining(", ")));

                // Modelle ohne echte Inhalte ignorieren
                if (model.nodes.isEmpty() && model.edges.isEmpty()) {
                    System.out.println("Ignoring file (empty or only comments): " + file.getName());
                    continue;
                }

                // Normalform & Hash für Duplikatserkennung
                String normalForm = generateNormalForm(model);
                String hash = computeHash(normalForm);
                duplicateGroups.computeIfAbsent(hash, k -> new ArrayList<>()).add(file.getName());
            }

            System.out.println("\nDuplicate Groups:");
            duplicateGroups.forEach((hash, filesList) -> {
                if (filesList.size() > 1) {
                    System.out.println("Hash: " + hash + " | Count: " + filesList.size() + " | Files: " + filesList);
                }
            });

            int duplicateFilesCount = duplicateGroups.values().stream()
                    .mapToInt(list -> list.size() - 1)
                    .sum();

            System.out.println("Total number of duplicate files: " + duplicateFilesCount);



        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
